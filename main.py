# -*- coding: utf-8 -*-
"""CSGO_Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15YozWUYVQqfxdenIl_jmyBJZeFbwOlGr
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score
import ipywidgets as widgets
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import display

# Veri Yükleme
data = pd.read_csv("dataset.csv", sep=";")

# Veri Ön İşleme
label_encoders = {}
for column in ["mapName", "roundEndReason", "ctBuyType", "tBuyType", "winningSide"]:
    le = LabelEncoder()
    data[column] = le.fit_transform(data[column])
    label_encoders[column] = le

# Bağımlı ve bağımsız değişkenlerin belirlenmesi
X = data[["mapName", "tScore", "ctScore", "ctBuyType", "tBuyType"]]
y = data["roundEndReason"]

# Veri Ölçeklendirme
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Veriyi eğitim ve test olarak bölme
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Model 1: Random Forest
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, y_train)

# Model 2: Logistic Regression
lr_model = LogisticRegression(random_state=42, max_iter=500)
lr_model.fit(X_train, y_train)

# Model 3: Gradient Boosting
gb_model = GradientBoostingClassifier(random_state=42)
gb_model.fit(X_train, y_train)

# Doğruluk Oranları
rf_accuracy = accuracy_score(y_test, rf_model.predict(X_test))
lr_accuracy = accuracy_score(y_test, lr_model.predict(X_test))
gb_accuracy = accuracy_score(y_test, gb_model.predict(X_test))

# Arayüz için Widgetlar
map_dropdown = widgets.Dropdown(
    options=list(label_encoders["mapName"].classes_),
    description="Map:",
)
t_score_slider = widgets.IntSlider(
    value=0, min=0, max=15, step=1, description="T Score:"
)
ct_score_slider = widgets.IntSlider(
    value=0, min=0, max=15, step=1, description="CT Score:"
)
ct_buy_dropdown = widgets.Dropdown(
    options=list(label_encoders["ctBuyType"].classes_),
    description="CT Buy Type:",
)
t_buy_dropdown = widgets.Dropdown(
    options=list(label_encoders["tBuyType"].classes_),
    description="T Buy Type:",
)

# Grafik ve Tahmin Çıktıları için Tek Bir Output Widget
output = widgets.Output()

# Tahmin Fonksiyonu
def predict_round(change):
    with output:
        output.clear_output()
        # Kullanıcı girdilerini dönüştürme
        input_data = pd.DataFrame({
            "mapName": [label_encoders["mapName"].transform([map_dropdown.value])[0]],
            "tScore": [t_score_slider.value],
            "ctScore": [ct_score_slider.value],
            "ctBuyType": [label_encoders["ctBuyType"].transform([ct_buy_dropdown.value])[0]],
            "tBuyType": [label_encoders["tBuyType"].transform([t_buy_dropdown.value])[0]],
        })

        # Veriyi ölçeklendirme
        input_data_scaled = scaler.transform(input_data)

        # Tahminler
        rf_prediction = rf_model.predict(input_data_scaled)
        rf_predicted_reason = label_encoders["roundEndReason"].inverse_transform(rf_prediction)[0]

        lr_prediction = lr_model.predict(input_data_scaled)
        lr_predicted_reason = label_encoders["roundEndReason"].inverse_transform(lr_prediction)[0]

        gb_prediction = gb_model.predict(input_data_scaled)
        gb_predicted_reason = label_encoders["roundEndReason"].inverse_transform(gb_prediction)[0]

        # Çıktılar
        print("Tahmin Sonuçları:")
        print(f"- Random Forest ile Tahmin: {rf_predicted_reason} (Doğruluk: {rf_accuracy:.2f})")
        print(f"- Logistic Regression ile Tahmin: {lr_predicted_reason} (Doğruluk: {lr_accuracy:.2f})")
        print(f"- Gradient Boosting ile Tahmin: {gb_predicted_reason} (Doğruluk: {gb_accuracy:.2f})")

# İlk Grafik: Seçilen Haritadaki Roundların Sona Erme Nedenlerinin Yüzdelikleri
def plot_map_round_end_reasons(change):
    with output:
        output.clear_output()
        filtered_data = data[data["mapName"] == label_encoders["mapName"].transform([map_dropdown.value])[0]]
        round_end_counts = filtered_data["roundEndReason"].value_counts(normalize=True) * 100
        round_end_labels = label_encoders["roundEndReason"].inverse_transform(round_end_counts.index)

        plt.figure(figsize=(8, 6))
        plt.pie(
            round_end_counts,
            labels=round_end_labels,
            autopct="%1.1f%%",
            startangle=140,
            colors=sns.color_palette("pastel")
        )
        plt.title(f"Round End Reasons (%) on Map: {map_dropdown.value}")
        plt.show()

# İkinci Grafik: Seçilen Ekonomi Modeline Göre Roundların Sona Erme Nedenlerinin Yüzdelikleri
def plot_economy_round_end_reasons(change):
    with output:
        output.clear_output()
        filtered_data = data[
            (data["ctBuyType"] == label_encoders["ctBuyType"].transform([ct_buy_dropdown.value])[0]) &
            (data["tBuyType"] == label_encoders["tBuyType"].transform([t_buy_dropdown.value])[0])
        ]
        round_end_counts = filtered_data["roundEndReason"].value_counts(normalize=True) * 100
        round_end_labels = label_encoders["roundEndReason"].inverse_transform(round_end_counts.index)

        plt.figure(figsize=(8, 6))
        plt.pie(
            round_end_counts,
            labels=round_end_labels,
            autopct="%1.1f%%",
            startangle=140,
            colors=sns.color_palette("pastel")
        )
        plt.title(f"Round End Reasons (%) for CT: {ct_buy_dropdown.value} & T: {t_buy_dropdown.value}")
        plt.show()

# Butonları genişletmek için genişlik (width) ekliyoruz
show_prediction = widgets.Button(description="Predict Round End Reasons", layout=widgets.Layout(width='auto'))
show_map_graph = widgets.Button(description="Show Map Round End Reasons", layout=widgets.Layout(width='auto'))
show_economy_graph = widgets.Button(description="Show Economy Round End Reasons", layout=widgets.Layout(width='auto'))

# Butonlara İşlev Ekleme
show_prediction.on_click(predict_round)
show_map_graph.on_click(plot_map_round_end_reasons)
show_economy_graph.on_click(plot_economy_round_end_reasons)

# Arayüzü Görüntüleme
display(widgets.VBox([
    map_dropdown,
    t_score_slider,
    ct_score_slider,
    ct_buy_dropdown,
    t_buy_dropdown,
    widgets.HBox([show_prediction, show_map_graph, show_economy_graph]),
    output,
]))